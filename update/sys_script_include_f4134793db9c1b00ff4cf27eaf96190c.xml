<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_protostar_cv.VehicleUtils</api_name>
        <client_callable>false</client_callable>
        <description>Protostar vehicle utils</description>
        <name>VehicleUtils</name>
        <script><![CDATA[var VehicleUtils = Class.create();
VehicleUtils.prototype = {
    initialize: function() {
    },
	//receives glide record vehicle
	//creates an api call and updates vehicle odometer
	updateOdometer: function(vehicle){
		try { 
			var r = new sn_ws.RESTMessageV2('x_snc_protostar_cv.Get Odometer', 'Default GET');
			r.setStringParameterNoEscape('API_Token', vehicle.api_access_token);
			r.setStringParameterNoEscape('CarID', vehicle.api_car_id);
			var response = r.execute();
			var responseBody = response.getBody();
			var httpStatus = response.getStatusCode();
			
			var parsed = JSON.parse(responseBody);
			if (!parsed.odometer)
				return "Offline";
			vehicle.odometer = parsed.odometer.value;
			vehicle.update();
			return parsed.odometer.value;
		} catch(ex) {
			var message = ex.getMessage();
			return "Error";
		}
	},
	//update all odometer values on the vehicles. Ignore the offline ones
	updateAllOdometers: function (){
		var gr = new GlideRecord('x_snc_protostar_cv_vehicle');
		gr.query();
		while(gr.next()) {
		 this.updateOdometer(gr);
		}
	},
	kickOffUpdateOdometersWorkflowForAllRecords: function (){
		gs.info('Updating all vehicle odometers');
		var gr = new GlideRecord('x_snc_protostar_cv_vehicle');
		gr.query();
		while(gr.next()) {
		 this.kickOffUpdateOdometersWorkflow(gr);
		}
	},
	kickOffUpdateOdometersWorkflow: function(vehicle){
		
		var wf = new global.Workflow();
		var wfId = wf.getWorkflowFromName("Update odometer");
		var vars = {};
	    wf.startFlow(wfId, vehicle, "Update odometer", vars);
		gs.addInfoMessage('Workflow initiated for car: .'+vehicle.number);
	},
	//freeMaintenanceNumber - enum - 0 if not from free maint, 1 for first, 2 for second
	createVehicleServiceRequest: function(vehicle, freeMaintenanceNumber) {
		var gr = new GlideRecord('x_snc_protostar_cv_vehicle_service');
		gr.initialize();
		gr.setValue('vehicle', vehicle.sys_id);
		gr.setValue('service_status', 'Booking Scheduled');
		gr.setValue('short_description', 'Service Request for ' + vehicle.number);
		if (freeMaintenanceNumber==1 || freeMaintenanceNumber==2) {
			gr.setValue('service_status', 'Notification Sent');
		}
		gr.insert();
		if (freeMaintenanceNumber==1) {
			vehicle.first_maintenance=gr.sys_id;
		}else if (freeMaintenanceNumber==2) {
			vehicle.second_maintenance=gr.sys_id;
		}
		vehicle.update();
	},
    type: 'VehicleUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-02-21 01:15:46</sys_created_on>
        <sys_id>f4134793db9c1b00ff4cf27eaf96190c</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>VehicleUtils</sys_name>
        <sys_package display_value="Protostar Connected Vehicle" source="x_snc_protostar_cv">27b26957dbd81b00ff4cf27eaf96194f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Protostar Connected Vehicle">27b26957dbd81b00ff4cf27eaf96194f</sys_scope>
        <sys_update_name>sys_script_include_f4134793db9c1b00ff4cf27eaf96190c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-02-25 07:29:20</sys_updated_on>
    </sys_script_include>
</record_update>
